/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.design;

import hr.algebra.dall.RepoFactory;
import hr.algebra.dall.Repository;
import hr.algebra.models.Actor;
import hr.algebra.models.Director;
import hr.algebra.models.Movie;
import hr.algebra.models.MovieTableModel;
import hr.algebra.models.PersonTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author Marko
 */
public class EditMoviesMain extends javax.swing.JPanel {

    private static final String FILENAME = "moviearchive.xml";
      
    private List<JTextField> validationFields;
    
    private final List<Actor> movieActors = new ArrayList<Actor>();
    private final List<Director> movieDirectors = new ArrayList<>();           
   
    private final DefaultListModel<Actor> allActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Actor> movieActorsModel = new DefaultListModel<>();
   
    private final DefaultListModel<Director> allDirectorsModel = new DefaultListModel<>();
    private final DefaultListModel<Director> movieDirectorsModel = new DefaultListModel<>();
    
    private MovieTableModel movieTableModel;
    private Repository repository;
    
    private Movie selectedMovie;
    /**
     * Creates new form EditMoviesMain
     */
    public EditMoviesMain() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPicture = new javax.swing.JLabel();
        txtFieldPicturePath = new javax.swing.JTextField();
        btnPicturePath = new javax.swing.JButton();
        txtFieldTitle = new javax.swing.JTextField();
        txtFieldDuration = new javax.swing.JTextField();
        txtFieldGenre = new javax.swing.JTextField();
        txtFieldPublishedDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaDescription = new javax.swing.JTextArea();
        listAllActors = new javax.swing.JScrollPane();
        listMovieActors = new javax.swing.JList();
        listAllActors1 = new javax.swing.JScrollPane();
        listAllDirectors = new javax.swing.JList();
        listAllActors2 = new javax.swing.JScrollPane();
        listMovieDirectors = new javax.swing.JList();
        listAllActors3 = new javax.swing.JScrollPane();
        listActors = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnRemoveActor = new javax.swing.JButton();
        btnRemoveDirectors = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(36, 37, 130));

        tbMovies.setBackground(new java.awt.Color(47, 47, 162));
        tbMovies.setForeground(new java.awt.Color(235, 64, 52));
        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.setGridColor(new java.awt.Color(252, 186, 3));
        tbMovies.setSelectionBackground(new java.awt.Color(85, 61, 103));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(235, 64, 52));
        jLabel1.setText("Movie Table");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(235, 64, 52));
        jLabel2.setText("Title:");

        btnRefresh.setBackground(new java.awt.Color(36, 37, 130));
        btnRefresh.setForeground(new java.awt.Color(252, 186, 3));
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(235, 64, 52));
        jLabel3.setText("Genre:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(235, 64, 52));
        jLabel4.setText("Published date:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(235, 64, 52));
        jLabel5.setText("Duration:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(235, 64, 52));
        jLabel6.setText("Picture Path:");

        txtFieldPicturePath.setBackground(new java.awt.Color(47, 47, 162));
        txtFieldPicturePath.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFieldPicturePath.setForeground(new java.awt.Color(235, 64, 52));

        btnPicturePath.setBackground(new java.awt.Color(36, 37, 130));
        btnPicturePath.setForeground(new java.awt.Color(255, 162, 3));
        btnPicturePath.setText("PATH");
        btnPicturePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPicturePathActionPerformed(evt);
            }
        });

        txtFieldTitle.setBackground(new java.awt.Color(47, 47, 162));
        txtFieldTitle.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFieldTitle.setForeground(new java.awt.Color(235, 64, 52));

        txtFieldDuration.setBackground(new java.awt.Color(47, 47, 162));
        txtFieldDuration.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFieldDuration.setForeground(new java.awt.Color(235, 64, 52));

        txtFieldGenre.setBackground(new java.awt.Color(47, 47, 162));
        txtFieldGenre.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFieldGenre.setForeground(new java.awt.Color(235, 64, 52));

        txtFieldPublishedDate.setBackground(new java.awt.Color(47, 47, 162));
        txtFieldPublishedDate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFieldPublishedDate.setForeground(new java.awt.Color(235, 64, 52));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(235, 64, 52));
        jLabel7.setText("Description:");

        txtAreaDescription.setBackground(new java.awt.Color(47, 47, 162));
        txtAreaDescription.setColumns(20);
        txtAreaDescription.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtAreaDescription.setForeground(new java.awt.Color(235, 64, 52));
        txtAreaDescription.setRows(5);
        jScrollPane2.setViewportView(txtAreaDescription);

        listMovieActors.setBackground(new java.awt.Color(47, 47, 162));
        listMovieActors.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listMovieActors.setForeground(new java.awt.Color(235, 64, 52));
        listAllActors.setViewportView(listMovieActors);

        listAllDirectors.setBackground(new java.awt.Color(47, 47, 162));
        listAllDirectors.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listAllDirectors.setForeground(new java.awt.Color(235, 64, 52));
        listAllActors1.setViewportView(listAllDirectors);

        listMovieDirectors.setBackground(new java.awt.Color(47, 47, 162));
        listMovieDirectors.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listMovieDirectors.setForeground(new java.awt.Color(235, 64, 52));
        listAllActors2.setViewportView(listMovieDirectors);

        listActors.setBackground(new java.awt.Color(47, 47, 162));
        listActors.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listActors.setForeground(new java.awt.Color(235, 64, 52));
        listAllActors3.setViewportView(listActors);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(235, 64, 52));
        jLabel8.setText("All Actors");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(235, 64, 52));
        jLabel9.setText("All Directors");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(235, 64, 52));
        jLabel10.setText("Movie Actors");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(235, 64, 52));
        jLabel11.setText("Movie Directors");

        btnRemoveActor.setBackground(new java.awt.Color(235, 64, 52));
        btnRemoveActor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnRemoveActor.setForeground(new java.awt.Color(36, 37, 130));
        btnRemoveActor.setText("Remove");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnRemoveDirectors.setBackground(new java.awt.Color(235, 64, 52));
        btnRemoveDirectors.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnRemoveDirectors.setForeground(new java.awt.Color(36, 37, 130));
        btnRemoveDirectors.setText("Remove");
        btnRemoveDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorsActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(36, 37, 130));
        btnUpdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(235, 64, 52));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(36, 37, 130));
        btnAdd.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(235, 64, 52));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(235, 64, 52));
        btnDelete.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(36, 37, 130));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtFieldTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                        .addComponent(txtFieldGenre)
                                        .addComponent(txtFieldDuration)
                                        .addComponent(txtFieldPublishedDate))
                                    .addGap(61, 61, 61)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(45, 45, 45)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7)
                            .addGap(365, 365, 365)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRefresh)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFieldPicturePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPicturePath)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(listAllActors3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listAllActors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(listAllActors1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel8)
                        .addGap(130, 130, 130)
                        .addComponent(jLabel10)
                        .addGap(30, 30, 30)
                        .addComponent(btnRemoveActor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(119, 119, 119)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(29, 29, 29)
                        .addComponent(btnRemoveDirectors))
                    .addComponent(listAllActors2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRefresh)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtFieldPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPicturePath)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addComponent(jLabel7)
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtFieldGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtFieldDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtFieldPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(listAllActors, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(listAllActors3)
                    .addComponent(listAllActors1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listAllActors2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(btnRemoveActor)
                    .addComponent(btnRemoveDirectors))
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovies();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        Movie movie = new Movie(
                txtFieldTitle.getText().trim(), 
                txtFieldGenre.getText().trim(),
                LocalDateTime.parse(txtFieldPublishedDate.getText().trim(), Movie.DATE_FORMATTER),
                txtFieldPicturePath.getText().trim(),
                txtAreaDescription.getText().trim(),
                Integer.parseInt(txtFieldDuration.getText().trim()),              
                new ArrayList<Actor>(movieActors),
                new ArrayList<Director>(movieDirectors));
                    
        try {
            repository.createMovie(movie);    
            movie.getActors().forEach(actor-> {
                try {
                    repository.createActorMovie(actor.getId(), movie.getId());
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Nemoguce je napraviti film");
        }        
        MessageUtils.showInformationMessage("Obavijest", "Dodan je novi film");
        clearForm();     
        initTables();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = tbMovies.getSelectedRow();		
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);
        
        try {
            Optional<Movie> optMovie = repository.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
            }
        } catch (Exception ex) {            
        }
        
        Movie movie = new Movie(
                txtFieldTitle.getText().trim(), 
                txtFieldGenre.getText().trim(),
                LocalDateTime.parse(txtFieldPublishedDate.getText().trim(), Movie.DATE_FORMATTER),
                txtFieldPicturePath.getText().trim(),
                txtAreaDescription.getText().trim(),
                Integer.parseInt(txtFieldDuration.getText().trim()),              
                new ArrayList<Actor>(movieActors),
                new ArrayList<Director>(movieDirectors));
                    
        try {
            repository.updateMovie(selectedMovie.getId(), movie);    
            
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Nemoguce je azurirati film");
        }        
        MessageUtils.showInformationMessage("Obavijest", "Film azuriran");
        clearForm();     
        initTables();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (MessageUtils.showConfirmDialog(
                "Delete article",
                "Do you really want to delete this movie?") == JOptionPane.YES_OPTION) {
            try {
            int selectedRow = tbMovies.getSelectedRow();
            int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
            int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);           
            
            repository.deleteMovie(selectedMovieId);
                
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Greska", "Nemoguce je izbrisati");
            }
        }
        
        MessageUtils.showInformationMessage("Obavijest", "Film izbrisan");
        clearForm();     
        initTables();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        initUI();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
         if(listMovieActors.getSelectedIndex() < 0)
        {
            return;
        }
        
        movieActors.remove(listMovieActors.getSelectedValue());
        loadMovieActorsModel();
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnRemoveDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorsActionPerformed
        if(listMovieDirectors.getSelectedIndex() < 0)
        {
            return;
        }
        
        movieDirectors.remove(listMovieDirectors.getSelectedValue());
        loadMovieDirectorsModel();
    }//GEN-LAST:event_btnRemoveDirectorsActionPerformed

    private void btnPicturePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPicturePathActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        txtFieldPicturePath.setText(file.get().getAbsolutePath());
        setIcon(lblPicture, file.get());
    }//GEN-LAST:event_btnPicturePathActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPicturePath;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirectors;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JList listActors;
    private javax.swing.JScrollPane listAllActors;
    private javax.swing.JScrollPane listAllActors1;
    private javax.swing.JScrollPane listAllActors2;
    private javax.swing.JScrollPane listAllActors3;
    private javax.swing.JList listAllDirectors;
    private javax.swing.JList listMovieActors;
    private javax.swing.JList listMovieDirectors;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextArea txtAreaDescription;
    private javax.swing.JTextField txtFieldDuration;
    private javax.swing.JTextField txtFieldGenre;
    private javax.swing.JTextField txtFieldPicturePath;
    private javax.swing.JTextField txtFieldPublishedDate;
    private javax.swing.JTextField txtFieldTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initValidation();
        initRepository();
        initUI();
    }

    private void showMovies() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();		
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {            
        }
    }
    private void setPicture(JLabel label, String path) {
        try {
            label.setIcon(IconUtils.createIcon(path, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to set picture!");
        }
    }
    private void fillForm(Movie movie) {
        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            txtFieldPicturePath.setText(movie.getPicturePath());
        } else {
            txtFieldPicturePath.setText("");
            lblPicture.setIcon(new ImageIcon(getClass().getResource("/assets/noImage.png")));
        }
        txtFieldTitle.setText(movie.getTitle());
        txtFieldGenre.setText(movie.getGenre());
        txtFieldDuration.setText(String.valueOf((movie.getDuration())));
        txtAreaDescription.setText(movie.getDescription());
        txtFieldPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        
        setPicture(lblPicture, movie.getPicturePath());
    }

    private void clearForm() {
        txtFieldTitle.setText("");
        txtFieldGenre.setText("");
        txtFieldDuration.setText("");
        txtFieldPicturePath.setText("");
        txtFieldPublishedDate.setText("");
        txtAreaDescription.setText("");
     
        movieActors.clear();
        movieDirectors.clear();
        
        loadMovieActorsModel();
        loadMovieDirectorsModel();
    }

    private void initValidation() {
        validationFields = Arrays.asList(txtFieldTitle, txtFieldGenre, txtFieldDuration, txtFieldPublishedDate, txtFieldPicturePath);
    }

    private void initRepository() {
        try {
            repository = RepoFactory.getRepository();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initUI() {
        try {
            if (repository.selectMovies().size() < 1) {
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        loadAllActorsModel();
        loadAllDirectorsModel();
        initTables();              
        initDragAndDrop();
    }

    private void loadAllActorsModel() {
        allActorsModel.clear();
        try {
            repository.selectActors().forEach(actor -> allActorsModel.addElement(actor));
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Greska kod odabiranja glumca");
        }
        listActors.setModel(allActorsModel);
    }

    private void loadAllDirectorsModel() {
        allDirectorsModel.clear();
        try {
            repository.selectDirectors().forEach(director -> allDirectorsModel.addElement(director));
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Greska kod odabiranja redatelja");
        }
        listAllDirectors.setModel(allDirectorsModel);
    }
    private void loadMovieDirectorsModel() {
        movieDirectorsModel.clear();
        movieDirectors.forEach(director -> movieDirectorsModel.addElement(director));
        listMovieDirectors.setModel(movieDirectorsModel);        
    }
    private void initTables() {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        try {
            movieTableModel = new MovieTableModel(repository.selectMovies());
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Nemoguce je odabrat film");
        }
        tbMovies.setModel(movieTableModel);
    }

    private void initDragAndDrop() {
        listActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listActors.setDragEnabled(true);
        listActors.setTransferHandler(new ActorExportTransferHandler());
      
        listMovieActors.setDropMode(DropMode.ON);
        listMovieActors.setTransferHandler(new ActorImportTransferHandler());
        
        listAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listAllDirectors.setDragEnabled(true);
        listAllDirectors.setTransferHandler(new DirectorExportTransferHandler());
      
        listMovieDirectors.setDropMode(DropMode.ON);
        listMovieDirectors.setTransferHandler(new DirectorImportTransferHandler());  
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Nemoguce je postaviti ikonu");
        }
    }

    private class DirectorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Director data = (Director) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if(movieDirectors.add(data)){
                    loadMovieDirectorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class DirectorExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable((Director) listAllDirectors.getSelectedValue());
        }
    }

    private class ActorImportTransferHandler extends TransferHandler {

         @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor data = (Actor) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if(movieActors.add(data)){
                    loadMovieActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }      
    }
    private void loadMovieActorsModel() {
            movieActorsModel.clear();
            movieActors.forEach(actor -> movieActorsModel.addElement(actor));
            listMovieActors.setModel(movieActorsModel);
        }
    private class ActorExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable((Actor) listActors.getSelectedValue());
        }
    }
}

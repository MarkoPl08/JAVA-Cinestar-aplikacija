/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.design;

import hr.algebra.dall.RepoFactory;
import hr.algebra.dall.Repository;
import hr.algebra.models.Actor;
import hr.algebra.models.Director;
import hr.algebra.models.PersonType;
import hr.algebra.utils.MessageUtils;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;

/**
 *
 * @author Marko
 */
public class Add_Person extends javax.swing.JPanel {

    private  Repository repository;
    
    private final DefaultListModel<Actor> allActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Director> allDirectorsModel = new DefaultListModel<>();
    /**
     * Creates new form Add_Person
     */
    public Add_Person() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFieldName = new javax.swing.JTextField();
        btnAddActorDirector = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbDirectors = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbActors = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnUpdateActor = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        btnUpdateDirector = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        cbActorDirector = new javax.swing.JComboBox<>();

        jCheckBox1.setText("jCheckBox1");

        setBackground(new java.awt.Color(36, 38, 130));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(235, 64, 52));
        jLabel1.setText("Edit Actor or Director");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(235, 64, 52));
        jLabel2.setText("Name:");

        txtFieldName.setBackground(new java.awt.Color(47, 47, 162));
        txtFieldName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtFieldName.setForeground(new java.awt.Color(235, 64, 52));

        btnAddActorDirector.setBackground(new java.awt.Color(36, 38, 130));
        btnAddActorDirector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAddActorDirector.setForeground(new java.awt.Color(235, 64, 52));
        btnAddActorDirector.setText("Add");
        btnAddActorDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorDirectorActionPerformed(evt);
            }
        });

        lbDirectors.setBackground(new java.awt.Color(47, 47, 162));
        lbDirectors.setForeground(new java.awt.Color(235, 64, 52));
        lbDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbDirectorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lbDirectors);

        lbActors.setBackground(new java.awt.Color(47, 47, 162));
        lbActors.setForeground(new java.awt.Color(235, 64, 52));
        lbActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbActorsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lbActors);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(235, 64, 52));
        jLabel3.setText("Actors:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(235, 64, 52));
        jLabel5.setText("Directors:");

        btnUpdateActor.setBackground(new java.awt.Color(36, 37, 130));
        btnUpdateActor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnUpdateActor.setForeground(new java.awt.Color(235, 64, 52));
        btnUpdateActor.setText("Update");
        btnUpdateActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActorActionPerformed(evt);
            }
        });

        btnDeleteActor.setBackground(new java.awt.Color(235, 64, 52));
        btnDeleteActor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnDeleteActor.setForeground(new java.awt.Color(36, 37, 130));
        btnDeleteActor.setText("Delete");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnUpdateDirector.setBackground(new java.awt.Color(36, 37, 130));
        btnUpdateDirector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnUpdateDirector.setForeground(new java.awt.Color(235, 64, 52));
        btnUpdateDirector.setText("Update");
        btnUpdateDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDirectorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setBackground(new java.awt.Color(235, 64, 52));
        btnDeleteDirector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnDeleteDirector.setForeground(new java.awt.Color(36, 37, 130));
        btnDeleteDirector.setText("Delete");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        cbActorDirector.setBackground(new java.awt.Color(36, 38, 130));
        cbActorDirector.setForeground(new java.awt.Color(235, 64, 52));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdateActor)
                                .addGap(131, 131, 131)
                                .addComponent(btnDeleteActor))
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddActorDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnUpdateDirector)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDeleteDirector))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(215, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(364, 364, 364))))
            .addGroup(layout.createSequentialGroup()
                .addGap(491, 491, 491)
                .addComponent(cbActorDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddActorDirector))
                .addGap(18, 18, 18)
                .addComponent(cbActorDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(453, 453, 453)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUpdateActor)
                                    .addComponent(btnDeleteActor)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateDirector)
                            .addComponent(btnDeleteDirector))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActorDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorDirectorActionPerformed
        if (formValid()) {
            
            if ((PersonType)cbActorDirector.getSelectedItem() == PersonType.ACTOR ) {
               addActor();
            } else{
                addDirector();
            }                    
        }
        loadAllActorsModel();
        loadAllDirectorsModel();
        clearForm(); 
    }//GEN-LAST:event_btnAddActorDirectorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        if (lbActors.getSelectedIndex() < 0) {
                    return;
                }
        removeActor();
        clearForm();
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        try {
            repository.createDirector(new Director(txtFieldName.getText().trim()));
          
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska!!", "Nemogucnost izrade direktora");
        }
        
        loadAllDirectorsModel();
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void btnUpdateActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActorActionPerformed
        if (lbActors.getSelectedIndex() < 0) {
            return;
        }               
                
        if ((PersonType)cbActorDirector.getSelectedItem() == PersonType.ACTOR) {            
            updateActor();
        }
        else {
            removeActor();
            addDirector();
        }
                
        loadAllActorsModel();
        loadAllDirectorsModel();
        clearForm();
    }//GEN-LAST:event_btnUpdateActorActionPerformed

    private void btnUpdateDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDirectorActionPerformed
        if (lbActors.getSelectedIndex() < 0) {
            return;
        }       
        
        if ((PersonType)cbActorDirector.getSelectedItem() == PersonType.DIRECTOR) {         
            updateDirector();
        }
        else {
            removeDirector();
            addActor();
        }
                
        loadAllActorsModel();
        loadAllDirectorsModel();
        clearForm();
    }//GEN-LAST:event_btnUpdateDirectorActionPerformed

    private void lbActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbActorsMouseClicked
        if (lbActors.getSelectedIndex() < 0) {
            return;
        }
        txtFieldName.setText(lbActors.getSelectedValue().toString());
    }//GEN-LAST:event_lbActorsMouseClicked

    private void lbDirectorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbDirectorsMouseClicked
        if (lbDirectors.getSelectedIndex() < 0) {
            return;
        }
        txtFieldName.setText(lbDirectors.getSelectedValue().toString());
    }//GEN-LAST:event_lbDirectorsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddActorDirector;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnUpdateActor;
    private javax.swing.JButton btnUpdateDirector;
    private javax.swing.JComboBox<PersonType> cbActorDirector;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lbActors;
    private javax.swing.JList lbDirectors;
    private javax.swing.JTextField txtFieldName;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            loadPersonTypeModel();            
            loadAllActorsModel();
            loadAllDirectorsModel();         
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Greska", "Greska kod pokretanja");
        }
    }

    private boolean formValid() {
        return !txtFieldName.getText().trim().isEmpty();
    }

    private void addActor() {
        try {
            repository.createActor(new Actor(txtFieldName.getText().trim()));
            
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska!!", "Nemoguce dodat Glumca!!!");
        }
        
        loadAllActorsModel();
    }

    private void addDirector() {
        try {
            repository.createDirector(new Director(txtFieldName.getText().trim()));
          
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska!!", "Nemoguce dodat Producenta!!!");
        }
        
        loadAllDirectorsModel();
    }

    private void loadAllActorsModel() {
        try {
            allActorsModel.clear();
            repository.selectActors().forEach(actor -> allActorsModel.addElement(actor));
            
            lbActors.setModel(allActorsModel);
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska", "Nemoguce odabrat Glumca!!!");
        }
    }

    private void loadAllDirectorsModel() {
        try {
            allDirectorsModel.clear();
            repository.selectDirectors().forEach(director -> allDirectorsModel.addElement(director));
            
            lbDirectors.setModel(allDirectorsModel);
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska", "Nemoguce odabrat Producenta!!!");
        }
    }

    private void clearForm() {
        txtFieldName.setText("");
    }

    private void removeActor() {
        try {
            Actor actor = (Actor) lbActors.getSelectedValue();
            repository.deleteActor(actor.getId());
            
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska", "Nemoguce izbrisat Glumca!!!");
        }
        loadAllActorsModel();
    }

    private void updateActor() {
        try {
            Actor actor = (Actor) lbActors.getSelectedValue();
            repository.updateActor(actor.getId(), new Actor(txtFieldName.getText()));
            
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Nemoguce azurirat Glumca!!!");
        }
        loadAllActorsModel();
    }

    private void updateDirector() {
        try {
            Director director = (Director) lbDirectors.getSelectedValue();
            repository.updateDirector(director.getId(), new Director(txtFieldName.getText()));
            
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesMain.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Nemoguce azurirat Producenta!!!");
        }
        loadAllDirectorsModel();
    }

    private void removeDirector() {
        try {
            Director director = (Director) lbDirectors.getSelectedValue();
            repository.deleteDirector(director.getId());
            
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska", "Nemoguce izbrisat Producenta!!!");
        }
        loadAllDirectorsModel();
    }

    private void loadPersonTypeModel() {
        DefaultComboBoxModel<PersonType> personTypesModel = new DefaultComboBoxModel<>();
        Arrays.stream(PersonType.values()).forEach(type -> personTypesModel.addElement(type));
        cbActorDirector.setModel(personTypesModel);
    }

    private void initRepository() {
        try {
            repository = RepoFactory.getRepository();
          
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Greska!!", "Greska!");
        }        
    }

    


}
